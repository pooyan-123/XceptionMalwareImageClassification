from math import log
import numpy as np
import pandas as pd
import scipy as sp
import seaborn as sns
import matplotlib
import matplotlib.pylab as plt
from PIL import Image
from keras.applications import Xception
from keras.applications.xception import preprocess_input
from keras.optimizers import Adamax
from keras.losses import BinaryCrossentropy
from keras.callbacks import EarlyStopping
import tensorflow as tf
from keras.layers import Input, Flatten, Dense
from keras.models import Model



dataset_pre = pd.read_csv('drive/MyDrive/Ransomware_headers.csv', delimiter = ',')
dataset = dataset_pre.drop(['ID', 'filename', 'family'], axis=1)
GR = dataset.pop("GR")
dataset.insert(len(dataset.columns), "Class", GR)
print("Rows:",dataset.shape[0],"Columns:",dataset.shape[1])
dataset



def malware_to_matrix(bytes):
  matrix = np.zeros((256, 256), dtype=np.int64)
  for k,entry in enumerate(bytes):
    for j in range(8):
      for i in range(8):
        matrix[j + int(k/32)*8][i + (k%32)*8] = entry
  return matrix / 255
malware_to_matrix(dataset.iloc[0,:-1])



def matrix_to_image(matrix):
  palette = sns.color_palette("Spectral", 256, as_cmap=True).reversed()
  plt.imshow(matrix, cmap=palette, vmin=0, vmax=1, interpolation="nearest")
  plt.colorbar()
matrix_to_image(malware_to_matrix(dataset.iloc[0,:-1]))



def save_matrix_as_image(matrix, path):
  palette = sns.color_palette("Spectral", 256, as_cmap=True).reversed()
  plt.imsave(path, matrix, cmap=palette, vmin=0, vmax=1)
  img = plt.imread(path)
  return img[:,:,:3]
save_matrix_as_image(malware_to_matrix(dataset.iloc[0,:-1]), "drive/MyDrive/0.png")
plt.imshow(save_matrix_as_image(malware_to_matrix(dataset.iloc[0,:-1]), "drive/MyDrive/0.png"), vmin=0, vmax=1, interpolation="nearest")



shuffled_dataset = dataset.copy(deep=True)
shuffled_dataset = shuffled_dataset.sample(frac=1).reset_index(drop=True)
train_portion = int(len(shuffled_dataset) * 0.8)
train_dataset = shuffled_dataset.iloc[:train_portion].copy(deep=True)
test_dataset = shuffled_dataset.iloc[train_portion:].copy(deep=True)
test_dataset = test_dataset.reset_index(drop=True)
test_dataset



train_array = np.zeros((len(train_dataset),256,256,3))
test_array = np.zeros((len(test_dataset),256,256,3))
print(train_array.shape, test_array.shape)
print(len(train_array), len(test_array))
for i,sample in train_dataset.iterrows():
  train_array[i] = save_matrix_as_image(malware_to_matrix(sample[:-1]), "drive/MyDrive/MalwareImage/Train/" + str(i) + ".png")
for i,sample in test_dataset.iterrows():
  test_array[i] = save_matrix_as_image(malware_to_matrix(sample[:-1]), "drive/MyDrive/MalwareImage/Test/" + str(i) + ".png")
print(train_array[0].shape)
print(train_array[0])
train_label_array = train_dataset.iloc[:,-1].to_numpy()
test_label_array = test_dataset.iloc[:,-1].to_numpy()
print(train_label_array.shape, test_label_array.shape)
print(train_label_array, test_label_array)
plt.imshow(test_array[3], vmin=0, vmax=1, interpolation="nearest")



xception_model = Xception(
    include_top=False,
    weights=None,
    input_shape=(256,256,3)
)
input = Input((256,256,3))
output = xception_model(input)
x = Flatten(name='flatten')(output)
x = Dense(128, activation='relu', name='fc1')(x)
x = Dense(128, activation='relu', name='fc2')(x)
x = Dense(1, activation='sigmoid', name='prediction')(x)
model = Model(inputs=input, outputs=x)
model.compile(
    optimizer=Adamax(learning_rate=0.001),
    loss=BinaryCrossentropy(),
    metrics=["accuracy"]
)
train_array = preprocess_input(train_array)
test_array = preprocess_input(test_array)
model.summary()



model.fit(
    x=train_array,
    y=train_label_array,
    batch_size=8,
    epochs=1,
    callbacks=EarlyStopping(monitor="accuracy",min_delta=0.001,patience=10,mode="max"),
    validation_split=0.1,
    verbose=1
)
model.save_weights("drive/MyDrive/model_1_86.h5")
#model.load_weights("drive/MyDrive/model_1_86.h5")



loss, accuracy = model.evaluate(
    x=test_array,
    y=test_label_array,
    batch_size=8
)
print('Test Accuracy: %.2f' % (accuracy*100))
loss, accuracy = model.evaluate(
    x=train_array,
    y=train_label_array,
    batch_size=8
)
print('Train Accuracy: %.2f' % (accuracy*100))



train_predicted_array = model.predict(
    train_array,
    batch_size=1
)
print(len(train_label_array), len(train_predicted_array))
for i in range(len(train_label_array)):
  print(train_predicted_array[i], train_label_array[i])

test_predicted_array = model.predict(
    test_array,
    batch_size=1
)
print(len(test_label_array), len(test_predicted_array))
for i in range(len(test_label_array)):
  print(test_predicted_array[i], test_label_array[i])